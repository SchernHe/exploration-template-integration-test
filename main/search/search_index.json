{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Integration Test Instance","text":"<p>Lorem ipsum...</p> <p>Project based on Explora - The Machine Learning Exploration Template</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#integration_test_instance","title":"<code>integration_test_instance</code>","text":""},{"location":"reference/#integration_test_instance.constants","title":"<code>constants</code>","text":""},{"location":"reference/#integration_test_instance.constants.DATA_ROOT_DIR","title":"<code>DATA_ROOT_DIR = PROJECT_ROOT / 'data'</code>  <code>module-attribute</code>","text":"<p>Parent directory for all data artifacts</p>"},{"location":"reference/#integration_test_instance.constants.PROJECT_ROOT","title":"<code>PROJECT_ROOT = Path(__file__).parents[2]</code>  <code>module-attribute</code>","text":"<p>Root path of this project</p>"},{"location":"reference/#integration_test_instance.constants.RAW_DATA_FILE","title":"<code>RAW_DATA_FILE = DATA_ROOT_DIR / 'raw/AmesHousing.csv'</code>  <code>module-attribute</code>","text":"<p>Path to the raw data file</p>"},{"location":"reference/#integration_test_instance.io","title":"<code>io</code>","text":""},{"location":"reference/#integration_test_instance.io.read_raw_data","title":"<code>read_raw_data(p: Path) -&gt; pd.DataFrame</code>","text":"<p>Preconfigured way to open our raw data. As soon as custom logic is necessary to open data (in this case: <code>index_col</code>), put it in its own function.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Path</code> <pre><code>Path to the file.\n</code></pre> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Dataframe with \"Order\" as the index.</p> Source code in <code>src/integration_test_instance/io/__init__.py</code> <pre><code>def read_raw_data(p: Path) -&gt; pd.DataFrame:\n    \"\"\"Preconfigured way to open our raw data.\n    As soon as custom logic is necessary to open data (in this case: `index_col`), put\n    it in its own function.\n\n    Parameters\n    ----------\n    p : Path\n            Path to the file.\n\n    Returns\n    -------\n    pd.DataFrame\n            Dataframe with \"Order\" as the index.\n    \"\"\"\n    df = pd.read_csv(p, index_col=\"Order\", sep=\"\\t\")\n\n    return df\n</code></pre>"},{"location":"reference/#integration_test_instance.io.read_raw_data_with_schema","title":"<code>read_raw_data_with_schema(p: Path) -&gt; pandera.typing.DataFrame[RawDataSchema]</code>","text":"<p>Alternative function to <code>read_raw_data</code>. Reads raw data from the path and checks whether the RawDataSchema is followed.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Path</code> <pre><code>Path to the raw data file\n</code></pre> required <p>Returns:</p> Type Description <code>DataFrame[RawDataSchema]</code> <p>Dataframe with the schema checked</p> Source code in <code>src/integration_test_instance/io/__init__.py</code> <pre><code>@pandera.check_types(lazy=True)\ndef read_raw_data_with_schema(p: Path) -&gt; pandera.typing.DataFrame[RawDataSchema]:\n    \"\"\"Alternative function to `read_raw_data`.\n    Reads raw data from the path and checks whether the\n    [RawDataSchema][integration_test_instance.io.schemas.RawDataSchema] is followed.\n\n    Parameters\n    ----------\n    p : Path\n            Path to the raw data file\n\n    Returns\n    -------\n    pandera.typing.DataFrame[RawDataSchema]\n            Dataframe with the schema checked\n    \"\"\"\n    raw_data = read_raw_data(p)\n\n    raw_pandera_data = pandera.typing.DataFrame[RawDataSchema](raw_data)\n\n    return raw_pandera_data\n</code></pre>"},{"location":"reference/#integration_test_instance.io.schemas","title":"<code>schemas</code>","text":""},{"location":"reference/#integration_test_instance.io.schemas.RawDataSchema","title":"<code>RawDataSchema</code>","text":"<p>             Bases: <code>SchemaModel</code></p> <p>InputSchema, used in RAW_DATA_FILE</p> Source code in <code>src/integration_test_instance/io/schemas.py</code> <pre><code>class RawDataSchema(pa.SchemaModel):\n    \"\"\"InputSchema, used in [RAW_DATA_FILE][integration_test_instance.constants.RAW_DATA_FILE]\"\"\"\n\n    order: Index[int] = pa.Field(alias=\"Order\", ge=0, check_name=True, unique=True)\n    \"\"\"Observation number.\"\"\"\n    pid: Series[int] = pa.Field(alias=\"PID\", unique=True, gt=0)\n    \"\"\"Parcel identification number - can be used with city web site for parcel review.\"\"\"\n    sale_price: Series[int] = pa.Field(alias=\"SalePrice\", gt=0)\n    \"\"\"The sale price of the property\"\"\"\n    street: Series[str] = pa.Field(alias=\"Street\", isin=[\"Pave\", \"Grvl\"])\n    \"\"\"Type of road access to property. Either `Pave` or `Grvl`\"\"\"\n    fence: Series[str] = pa.Field(alias=\"Fence\", nullable=True)\n    \"\"\"Fence quality, can be `NaN`\"\"\"\n</code></pre>"},{"location":"reference/#integration_test_instance.io.schemas.RawDataSchema.fence","title":"<code>fence: Series[str] = pa.Field(alias='Fence', nullable=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Fence quality, can be <code>NaN</code></p>"},{"location":"reference/#integration_test_instance.io.schemas.RawDataSchema.order","title":"<code>order: Index[int] = pa.Field(alias='Order', ge=0, check_name=True, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Observation number.</p>"},{"location":"reference/#integration_test_instance.io.schemas.RawDataSchema.pid","title":"<code>pid: Series[int] = pa.Field(alias='PID', unique=True, gt=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Parcel identification number - can be used with city web site for parcel review.</p>"},{"location":"reference/#integration_test_instance.io.schemas.RawDataSchema.sale_price","title":"<code>sale_price: Series[int] = pa.Field(alias='SalePrice', gt=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The sale price of the property</p>"},{"location":"reference/#integration_test_instance.io.schemas.RawDataSchema.street","title":"<code>street: Series[str] = pa.Field(alias='Street', isin=['Pave', 'Grvl'])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of road access to property. Either <code>Pave</code> or <code>Grvl</code></p>"},{"location":"reference/#integration_test_instance.mlops","title":"<code>mlops</code>","text":""},{"location":"reference/#integration_test_instance.mlops.jupytext_to_executed_notebook","title":"<code>jupytext_to_executed_notebook</code>","text":""},{"location":"reference/#integration_test_instance.mlops.jupytext_to_executed_notebook.jupytext_to_executed_notebook","title":"<code>jupytext_to_executed_notebook(jupytext_path: os.PathLike, executed_notebook_path: os.PathLike) -&gt; None</code>","text":"<p>Reads a jupytext file, executes it, and stores the notebook with results as <code>.ipynb</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>jupytext_path</code> <code>PathLike</code> <p>Path to a jupytext File</p> required <code>executed_notebook_path</code> <code>PathLike</code> <p>Path where the generated notebook is supposed to be stored, stored as <code>.ipynb</code>.</p> required Source code in <code>src/integration_test_instance/mlops/jupytext_to_executed_notebook.py</code> <pre><code>def jupytext_to_executed_notebook(\n    jupytext_path: os.PathLike, executed_notebook_path: os.PathLike\n) -&gt; None:\n    \"\"\"Reads a [jupytext](https://jupytext.readthedocs.io/en/latest/) file, executes it,\n    and stores the notebook with results as `.ipynb` file.\n\n    Parameters\n    ----------\n    jupytext_path : os.PathLike\n        Path to a jupytext File\n    executed_notebook_path : os.PathLike\n        Path where the generated notebook is supposed to be stored, stored as `.ipynb`.\n    \"\"\"\n    jupytext_path = Path(jupytext_path)\n    executed_notebook_path = Path(executed_notebook_path)\n\n    jupytext_code = jupytext.read(fp=str(jupytext_path), fmt=\"py:percent\")\n    ExecutePreprocessor().preprocess(jupytext_code)\n\n    executed_notebook_path.parent.mkdir(exist_ok=True, parents=True)\n\n    nbformat.write(\n        nb=jupytext_code, fp=str(executed_notebook_path.with_suffix(\".ipynb\"))\n    )\n</code></pre>"},{"location":"reference/#integration_test_instance.mlops.jupytext_to_executed_notebook.main","title":"<code>main() -&gt; None</code>","text":"<p>Reads <code>sys.argv</code> for a path to a file or directory containing <code>.py</code> files with jupytext, executes them, and stores the results as <code>.ipynb</code> in the provided output file or directory.</p> <p>Usage: python jupytext_to_executed_notebook.py in_file_or_dir out_file_or_dir</p> Source code in <code>src/integration_test_instance/mlops/jupytext_to_executed_notebook.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Reads `sys.argv` for a path to a file or directory containing `.py` files with\n    [jupytext](https://jupytext.readthedocs.io/en/latest/), executes them, and stores\n    the results as `.ipynb` in the provided output file or directory.\n\n    Usage: python jupytext_to_executed_notebook.py in_file_or_dir out_file_or_dir\n    \"\"\"\n    if len(sys.argv) &lt; 3:\n        logger.error(\"Not enough arguments provided\")\n        logger.info(\n            \"Usage: python jupytext_to_executed_notebook.py in_file_or_dir out_file_or_dir\"\n        )\n        sys.exit(1)\n\n    in_path = Path(sys.argv[1])\n    out_path = Path(sys.argv[2])\n\n    in_files = []\n    if in_path.is_dir():\n        in_files = list(sorted(in_path.glob(\"**/*.py\")))\n    else:\n        in_files = [in_path]\n\n    for f in in_files:\n        if in_path.is_dir():\n            relative_in_file = f.relative_to(in_path)\n            out_file = out_path / relative_in_file.with_suffix(\".ipynb\")\n            out_file.parent.mkdir(parents=True, exist_ok=True)\n        else:\n            out_file = out_path.with_suffix(\".ipynb\")\n            out_file.parent.mkdir(parents=True, exist_ok=True)\n\n        logger.info(f\"Executing Jupytext {f}, storing executed notebook in {out_file}\")\n\n        start_time = datetime.datetime.now()\n        jupytext_to_executed_notebook(f, out_file)\n        end_time = datetime.datetime.now()\n\n        logger.debug(f\"Executing {f} took {end_time - start_time}\")\n</code></pre>"},{"location":"technical_details/","title":"Technical Details","text":""},{"location":"technical_details/#toolstack","title":"Toolstack","text":"<ul> <li>VSCode Devcontainer</li> <li>Git LFS for networked Data storage &amp; versioning</li> <li>Pre-commit setup</li> <li>mike-mkdocs</li> </ul>"},{"location":"technical_details/#ci-setup","title":"CI Setup","text":"<ul> <li>In your project create a cleanup policy, 7 days should be enough<ul> <li>docs</li> </ul> </li> <li>Follow step 1 &amp; 2 from the instructions of <code>mike-mkdocs</code>: docs</li> </ul>"}]}